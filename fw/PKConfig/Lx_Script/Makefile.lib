FIND_PATH = $(shell grep -s ".*-y.*=.*" $(1) |sed -e "s/.*=//")
ECHO = $(if $(shell echo -e "\n"),echo ,echo -e)
ECHO_CMD = echo
FIND_CMD = find
GREP_CMD = grep
CP_CMD = cp
RM_CMD = rm
MKDIR_CMD = mkdir
SED_CMD = sed
PRINTF_CMD = printf 
SDKPATH_FILE = $(PRJ_PATH)/.SDKPath
HOST_CC = gcc

CHECK_CC_RULE = $(shell if $(HOST_CC) $(1)  -S -o /dev/null -xc /dev/null  > /dev/null 2>&1 ;then echo $(1) ;fi)

define KENERL_MODULE_INSTALL
    set -e ; if [ -f "$(KERNEL_SRCDIR)/linux/$(1)" ];then \
      $(CP_CMD) $(KERNEL_SRCDIR)/linux/$(1) $(BINPATH)/module;\
      $(ECHO_CMD) "  Install kernel module $(1)" ;\
    fi;      
endef

define CONDITION_HOSTCC 
    set -e;if [ -f $(1) ] ;then \
      $(HOST_CC) -c $(1) $(2); \
    fi; \
    $(HOST_CC) $(1:.c=.o) -o $(1:.c=)  $(3);
endef

define CONDITION_CC 
    $(Q)set -e;if [ -f $(1) ] ;then \
      $(CC) -c $(1) $(2); \
    fi; \
    $(CC) $(1:.c=.o) -o $(1:.c=)  $(3);
endef

define CONDITION_CC1 
    set -e;if [ -f $(1) ] ;then \
      $(CC) -c $(1) $(2); \
    fi; 
endef

define CONDITION_CC2 
    $(CC) $(2) -o $(1)  $(3);
endef

define SDKPATH_CMD
	$(Q)if [ ! -f $(SDKPATH_FILE) ] ;then touch $(SDKPATH_FILE);else rm $(SDKPATH_FILE) ;fi
	$(Q)$(GREP_CMD) -s 'CONFIG_EXTRACT_PATH=' $(PRJ_PATH)/.config  | \
	$(SED_CMD) -e 's/CONFIG_EXTRACT_PATH=\"\(.*\)\"/EXTRPATH_tmp=\1/' >> $(SDKPATH_FILE)
	@$(ECHO) "EXTRPATH =\$$(strip \$$(shell cd \$$(PRJ_PATH);if [ ! -d \$$(PRJ_PATH)/\$$(EXTRPATH_tmp) ];then \
	mkdir -p \$$(PRJ_PATH)/\$$(EXTRPATH_tmp); fi;cd \$$(PRJ_PATH);pwd ))" >> $(SDKPATH_FILE)
	$(Q)$(ECHO_CMD) "\$$(if \$$(EXTRPATH_tmp),,\$$(shell rm $(SDKPATH_FILE) .config ))" >>$(SDKPATH_FILE)
	$(Q)$(ECHO_CMD) "\$$(if \$$(EXTRPATH_tmp),,\$$(error no SDK path in the configuration file))"  >>$(SDKPATH_FILE)
	$(Q)$(ECHO) "DTKPATH=\$$(shell cd \$$(EXTRPATH)/\$$(EXTRPATH_tmp);pwd)" >>$(SDKPATH_FILE)
	$(Q)$(ECHO) "SDKPATH=\$$(shell cd \$$(EXTRPATH)/\$$(EXTRPATH_tmp);pwd)" >> $(SDKPATH_FILE)
endef

define STRIPOBJS_INFOLDER 
	$(Q)for i in $(shell ls -d $(1)); do if [ -f $$i ] ;then $(STRIP) -s $$i ;fi; done; 
endef

#parameter 1: search default pattern-list : $(DEFAULT_PATTERN)
#parameter 2: folder name
#parameter 3: exclude files
#parameter 4: swarch other pattern-list : $(OTHER_PATTERN)
define GEN_SEARCH_LIST
    $(filter-out $(3), $(sort $(shell for i in $(1);do $(call SEARCH_FILES,$$i,$(2),$(3)) ;done) \
    $(shell if [ -n $(4) ];then for i in $(4);do $(FIND_CMD) . -name $$i;done fi)\
    ))
endef

#parameter 1: search pattern
#parameter 2: folder name
#parameter 3: exclude files
define SEARCH_FILES
    $(FIND_CMD) $(2) -type f -iname "$(1)" |$(GREP_CMD) -vw "Host";
    $(FIND_CMD) $(2) -type f -iname "$(1)" |$(GREP_CMD) -s "Host/$(MYMCU)" | $(GREP_CMD) -vw "Board";
    $(FIND_CMD) $(2) -type f -iname "$(1)" |$(GREP_CMD) -s "Host/$(MYMCU)/Board/$(BOARD)"
endef

find_string_in_file = $(shell $(GREP_CMD) -o "\<$(2)\>" $(1))

define FIND_DEPRECIATED_FUNCTION
    $(Q)if [ ! -z "$(call find_string_in_file,$(1),printf)" ];then \
       $(GREP_CMD) -n -s "\<$(3)\>" $(1);\
       $(ECHO_CMD) "WARNING: \"$(3)\" is depreciated function!";exit 1; \
    fi; 
endef
check_depreciated_function = $(call FIND_DEPRECIATED_FUNCTION,$(1),$(2),printf)

#parameter 1: searching list from function-SEARCH_FILES
#parameter 2: SDK folder name
define SDK_CP_TASK
	if [ ! -d $(2) ];then $(MKDIR_CMD) -p $(2); fi;
	for i in $(sort $(dir $(1)));do \
	if [ ! -d $(2)/$$i ];then \
	$(MKDIR_CMD) -p $(2)/$$i;\
	fi; \
	done;
	for i in $(wildcard $(1)); do $(CP_CMD) -af $$i $(2)/$$i; done
endef

#paramter 1: the folders which you want to remove
define RM_TASK
	$(Q)for i in $(sort  $(1));do \
	if [ -d $$i ] || [ -f $$i ] ;then \
	$(RM_CMD) -rf $$i && $(ECHO_CMD) "CLEAN " $$i; \
	fi;done
endef
#parameter 1: files list
#parameter 2: folder name; if folder doensn't exist,it will create it.
define CP_TASK
	if [ ! -d $(2) ];then $(MKDIR_CMD) -p $(2); fi;
	for i in $(wildcard $(1)); do \
	$(CP_CMD) -af $$i $(2)/; \
	done
endef
#parameter 1: sed pattern 
#parameter 2: file name
define SED_TASK
	$(SED_CMD) -e $(1) -i $(2) && $(ECHO_CMD) " Sed this file $(2)"
endef

#parameter 1: C source file list
define OBJECT_FILE
	$(sort  $(foreach n,$(if $(wildcard $(1)),$(wildcard $(1)),$(wildcard $(patsubst %.c,%.o, $(1))) ),$(patsubst %.c,%.o, $(n))))
endef

#parameter 1: C source file list 
define DEPENDENCY_FILE
	$(filter %.d ,$(patsubst %.c,%.d,$(wildcard $(1))))
endef
define SHOW_FSSIZE
	$(Q)$(ECHO_CMD) "===================Filesystem [$(3)]============================="
	$(Q)$(ECHO_CMD) " Total size : $(1) Mbytes "
	$(Q)$(PRINTF_CMD) " In used : %s Kbytes\n"  `du -sk $(2) | awk '{ print $$1}'`
	$(Q)$(ECHO_CMD) "==============================================================="
endef
